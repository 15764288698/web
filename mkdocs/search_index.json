{
    "docs": [
        {
            "location": "/", 
            "text": "MFEM\n is a \nlightweight\n, \ngeneral\n, \nscalable\n C++ library for finite element methods.\n\n\nFeatures\n\n\n\n\n2D and 3D, arbitrary high-order elements.\n\n\nH\n1\n, \nH(curl)\n, \nH(div)\n, L\n2\n and NURBS spaces.\n\n\nMPI version scalable to \nhundreds of thousands\n of cores.\n\n\nAdaptive mesh refinement (\nAMR\n): conforming, nonconforming, anisotropic.\n\n\nGalerkin, \nmixed\n, isogeometric, \nDG\n and \nDPG\n discretizations.\n\n\nTriangular, quadrilateral, tetrahedral and hexahedral \ncurved\n elements.\n\n\n... and \nmany more\n.\n\n\n\n\nMFEM is currently used in the \nBLAST\n, \nGLVis\n and \nXBraid\n projects. \n\n\n\n\n\n\n\n\n\n\nLatest Release\n\n\n\n\nNew features\n \n/ \nExample codes\n\n/ \nCode documentation\n \n\n\n\n\n\nDownload mfem-3.0.1.tgz\n\n\n\n\nFor older releases see \ndownloads\n.\n\n\nDocumentation\n\n\nThe best starting point for new users are the \nexample codes\n.\n\n\n\n\nBuilding MFEM\n \n/ \nSerial Tutorial\n \n/ \nParallel Tutorial\n \n\n\nGLVis documentation:\n\n\nMesh Formats\n \n/ \nGLVis Tutorials\n\n\n\n\nContact\n\n\nPlease use GitHub \nissue tracker\n\nto report \nbugs\n \nor post \nquestions or comments\n.\n\n\nDeveloped by the \nMFEM team\n at \nCASC\n, \nLLNL\n. \nPlease cite with\n\n\n@misc{mfem-library,\n  title={{MFEM}: Modular finite element methods},\n  howpublished={\\url{mfem.org}}\n}\n\n\nSee also our list of \npublications\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#features", 
            "text": "2D and 3D, arbitrary high-order elements.  H 1 ,  H(curl) ,  H(div) , L 2  and NURBS spaces.  MPI version scalable to  hundreds of thousands  of cores.  Adaptive mesh refinement ( AMR ): conforming, nonconforming, anisotropic.  Galerkin,  mixed , isogeometric,  DG  and  DPG  discretizations.  Triangular, quadrilateral, tetrahedral and hexahedral  curved  elements.  ... and  many more .   MFEM is currently used in the  BLAST ,  GLVis  and  XBraid  projects.", 
            "title": "Features"
        }, 
        {
            "location": "/#latest-release", 
            "text": "New features  \n/  Example codes \n/  Code documentation     Download mfem-3.0.1.tgz   For older releases see  downloads .", 
            "title": "Latest Release"
        }, 
        {
            "location": "/#documentation", 
            "text": "The best starting point for new users are the  example codes .   Building MFEM  \n/  Serial Tutorial  \n/  Parallel Tutorial    GLVis documentation:  Mesh Formats  \n/  GLVis Tutorials", 
            "title": "Documentation"
        }, 
        {
            "location": "/#contact", 
            "text": "Please use GitHub  issue tracker \nto report  bugs  \nor post  questions or comments .  Developed by the  MFEM team  at  CASC ,  LLNL . \nPlease cite with \n@misc{mfem-library,\n  title={{MFEM}: Modular finite element methods},\n  howpublished={\\url{mfem.org}}\n}  See also our list of  publications .", 
            "title": "Contact"
        }, 
        {
            "location": "/features/", 
            "text": "Features\n\n\nThe goal of MFEM is to enable research and development of scalable finite element discretization and solver algorithms through general finite element abstractions, accurate and flexible visualization, and tight integration with the \nhypre\n library.\n\n\nConceptually, MFEM can be viewed as a finite element toolbox that provides the building blocks for developing finite element algorithms in a manner similar to that of MATLAB for linear algebra methods.\n\n\nHigher-order Finite Element Spaces\n\n\n\n\nMFEM supports a wide variety of \nfinite element\n \nspaces\n in 2D and 3D, including arbitrary high-order:\n\n\n\n\nH1\n-conforming, \nH(div)\n-conforming, \nH(curl)\n-conforming spaces,\n\n\ndiscontinuous \nL2\n spaces,\n\n\nnumerical trace (\ninterfacial\n) spaces,\n\n\nNURBS\n spaces for isogeometric analysis.\n\n\n\n\nMany \nbilinear\n and \nlinear\n forms defined on these spaces, as well as linear operators such as gradient, curl and embedding between these spaces, are available in the code.\n\n\nFlexible Discretization\n\n\nIn addition to classical Galerkin methods, MFEM enables the quick prototyping of\n\n\n\n\nmixed\n finite elements,\n\n\nDiscontinuous Galerkin (\nDG\n) methods,\n\n\nisogeometric\n analysis methods,\n\n\nDiscontinuous Petrov-Galerkin (\nDPG\n) approaches.\n\n\n\n\n\n\nWide Range of Mesh Types\n\n\nMFEM supports arbitrary element \ntransformations\n and includes classes for dealing with:\n\n\n\n\ntriangular, quadrilateral, tetrahedral and hexahedral \nelements\n,\n\n\nconforming local mesh refinement (triangular/tetrahedral meshes),\n\n\nnon-conforming mesh refinement (quadrilateral/hexahedral meshes), including anisotropic refinement,\n\n\nhigher-order elements with \ncurved\n boundaries,\n\n\nsurface\n meshes embedded in 3D,\n\n\ntopologically \nperiodic\n meshes,\n\n\n1D meshes.\n\n\n\n\nParallel and Scalable\n\n\nMFEM supports MPI-based parallelism throughout the library, and can readily be used as a scalable unstructured finite element problem generator.\n\n\n\n\nMFEM-based \napplications\n have been \nscaled\n to \nhundreds of thousands\n of parallel cores.\n\n\nAn experimental support for OpenMP acceleration is also included.\n\n\n\n\nA serial MFEM application typically requires \nminimal\n \nchanges\n to transition to a high-performing parallel version of the code, where it can take advantage of the integrated scalable linear solvers from the \nhypre\n library.\n\n\nBuilt-in Solvers\n\n\nMFEM is commonly used as a \"finite element to linear algebra translator\", since it can take a problem described in terms of finite element-type objects, and produce the corresponding linear algebra\n\nvectors\n and \nsparse matrices\n.\n\n\nSeveral matrix storage formats are available including dense, compressed sparse row (\nCSR\n) and parallel compressed sparse row (\nParCSR\n). Block vectors, operators and \nmatrices\n are also supported.\n\n\nA variety of solvers are available for the resulting linear algebra systems (or semi-discrete time-integration problems):\n\n\n\n\npoint-wise and polynomial \nserial\n and \nparallel\n smoothers,\n\n\n\nKrylov solvers\n, such as PCG, MINRES and GMRES applicable to general \noperators\n in serial and in parallel,\n\n\nhigh-performance preconditioners from the \nhypre\n library including the \nBoomerAMG\n, \nAMS\n and \nADS\n solvers,\n\n\nsequential sparse direct solvers from the \nSuiteSparse\n library,\n\n\nexplicit and implicit high-order Runge-Kutta \ntime integrators\n,\n\n\nsolvers for nonlinear problems (Newton) and for single linearly constrained \nquadratic minimization\n problems.\n\n\n\n\nExtensive Examples\n\n\nMFEM includes a number of well-documented \nexample codes\n that can be used as tutorials, as well as simple starting points for user applications. Some of the included example codes are:\n\n\n\n\nExample 1\n: nodal H1 FEM for the Laplace problem,\n\n\nExample 2\n: vector FEM for linear elasticity,\n\n\nExample 3\n: Nedelec H(curl) FEM for the definite Maxwell problem,\n\n\nExample 4\n: Raviart-Thomas H(div) FEM for the grad-div problem,\n\n\nExample 5\n: mixed pressure-velocity FEM for the Darcy problem,\n\n\nExample 6\n: non-conforming adaptive mesh refinement for the Laplace problem,\n\n\nExample 7\n: Laplace problem on a surface (the unit sphere),\n\n\nExample 8\n: Discontinuous Petrov-Galerkin (DPG) for the Laplace problem,\n\n\nExample 9\n: Discontinuous Galerkin (DG) time-dependent advection,\n\n\nExample 10\n: time-dependent implicit nonlinear elasticity.\n\n\n\n\nMost of the examples have a serial and a parallel version, illustrating the ease of transition and the minimal code changes between the two.\n\n\nAccurate and Flexible Visualization\n\n\nThe general (high-order) meshes and finite element functions in MFEM can be visualized accurately using the companion OpenGL visualization tool \nGLVis\n, which is built on top of MFEM.\n\n\nThe \nVisIt\n visualization and analysis tool also natively supports MFEM formats.\n\n\nLightweight, Portable and Easily Extendable\n\n\nThe MFEM code base is \nrelatively small\n and is written in highly portable C++ (e.g. with very limited use of templates and the STL).\n\n\n\n\nThe serial version of MFEM has no external dependencies and is \nstraightforward to build\n on Linux, Mac and Windows machines.\n\n\nThe MPI-parallel version uses two third-party libraries (\nhypre\n and METIS), and is also easy to build with an MPI compiler.\n\n\nOn most machines, both versions can be built in under a minute by typing: \"\nmake serial -j\n\" and \"\nmake parallel -j\n\" respectively.\n\n\n\n\nThe object-oriented design of MFEM \nseparates\n the mesh, finite element and linear algebra abstractions, making it easy to extend the library and adapt it to a variety of \napplications\n.\n\n\nOpen Source\n\n\nMFEM is an open-source software, and can be freely used under the terms of the \nLGPL 2.1\n license.", 
            "title": "Features"
        }, 
        {
            "location": "/features/#features", 
            "text": "The goal of MFEM is to enable research and development of scalable finite element discretization and solver algorithms through general finite element abstractions, accurate and flexible visualization, and tight integration with the  hypre  library.  Conceptually, MFEM can be viewed as a finite element toolbox that provides the building blocks for developing finite element algorithms in a manner similar to that of MATLAB for linear algebra methods.", 
            "title": "Features"
        }, 
        {
            "location": "/features/#higher-order-finite-element-spaces", 
            "text": "MFEM supports a wide variety of  finite element   spaces  in 2D and 3D, including arbitrary high-order:   H1 -conforming,  H(div) -conforming,  H(curl) -conforming spaces,  discontinuous  L2  spaces,  numerical trace ( interfacial ) spaces,  NURBS  spaces for isogeometric analysis.   Many  bilinear  and  linear  forms defined on these spaces, as well as linear operators such as gradient, curl and embedding between these spaces, are available in the code.", 
            "title": "Higher-order Finite Element Spaces"
        }, 
        {
            "location": "/features/#flexible-discretization", 
            "text": "In addition to classical Galerkin methods, MFEM enables the quick prototyping of   mixed  finite elements,  Discontinuous Galerkin ( DG ) methods,  isogeometric  analysis methods,  Discontinuous Petrov-Galerkin ( DPG ) approaches.", 
            "title": "Flexible Discretization"
        }, 
        {
            "location": "/features/#wide-range-of-mesh-types", 
            "text": "MFEM supports arbitrary element  transformations  and includes classes for dealing with:   triangular, quadrilateral, tetrahedral and hexahedral  elements ,  conforming local mesh refinement (triangular/tetrahedral meshes),  non-conforming mesh refinement (quadrilateral/hexahedral meshes), including anisotropic refinement,  higher-order elements with  curved  boundaries,  surface  meshes embedded in 3D,  topologically  periodic  meshes,  1D meshes.", 
            "title": "Wide Range of Mesh Types"
        }, 
        {
            "location": "/features/#parallel-and-scalable", 
            "text": "MFEM supports MPI-based parallelism throughout the library, and can readily be used as a scalable unstructured finite element problem generator.   MFEM-based  applications  have been  scaled  to  hundreds of thousands  of parallel cores.  An experimental support for OpenMP acceleration is also included.   A serial MFEM application typically requires  minimal   changes  to transition to a high-performing parallel version of the code, where it can take advantage of the integrated scalable linear solvers from the  hypre  library.", 
            "title": "Parallel and Scalable"
        }, 
        {
            "location": "/features/#built-in-solvers", 
            "text": "MFEM is commonly used as a \"finite element to linear algebra translator\", since it can take a problem described in terms of finite element-type objects, and produce the corresponding linear algebra vectors  and  sparse matrices .  Several matrix storage formats are available including dense, compressed sparse row ( CSR ) and parallel compressed sparse row ( ParCSR ). Block vectors, operators and  matrices  are also supported.  A variety of solvers are available for the resulting linear algebra systems (or semi-discrete time-integration problems):   point-wise and polynomial  serial  and  parallel  smoothers,  Krylov solvers , such as PCG, MINRES and GMRES applicable to general  operators  in serial and in parallel,  high-performance preconditioners from the  hypre  library including the  BoomerAMG ,  AMS  and  ADS  solvers,  sequential sparse direct solvers from the  SuiteSparse  library,  explicit and implicit high-order Runge-Kutta  time integrators ,  solvers for nonlinear problems (Newton) and for single linearly constrained  quadratic minimization  problems.", 
            "title": "Built-in Solvers"
        }, 
        {
            "location": "/features/#extensive-examples", 
            "text": "MFEM includes a number of well-documented  example codes  that can be used as tutorials, as well as simple starting points for user applications. Some of the included example codes are:   Example 1 : nodal H1 FEM for the Laplace problem,  Example 2 : vector FEM for linear elasticity,  Example 3 : Nedelec H(curl) FEM for the definite Maxwell problem,  Example 4 : Raviart-Thomas H(div) FEM for the grad-div problem,  Example 5 : mixed pressure-velocity FEM for the Darcy problem,  Example 6 : non-conforming adaptive mesh refinement for the Laplace problem,  Example 7 : Laplace problem on a surface (the unit sphere),  Example 8 : Discontinuous Petrov-Galerkin (DPG) for the Laplace problem,  Example 9 : Discontinuous Galerkin (DG) time-dependent advection,  Example 10 : time-dependent implicit nonlinear elasticity.   Most of the examples have a serial and a parallel version, illustrating the ease of transition and the minimal code changes between the two.", 
            "title": "Extensive Examples"
        }, 
        {
            "location": "/features/#accurate-and-flexible-visualization", 
            "text": "The general (high-order) meshes and finite element functions in MFEM can be visualized accurately using the companion OpenGL visualization tool  GLVis , which is built on top of MFEM.  The  VisIt  visualization and analysis tool also natively supports MFEM formats.", 
            "title": "Accurate and Flexible Visualization"
        }, 
        {
            "location": "/features/#lightweight-portable-and-easily-extendable", 
            "text": "The MFEM code base is  relatively small  and is written in highly portable C++ (e.g. with very limited use of templates and the STL).   The serial version of MFEM has no external dependencies and is  straightforward to build  on Linux, Mac and Windows machines.  The MPI-parallel version uses two third-party libraries ( hypre  and METIS), and is also easy to build with an MPI compiler.  On most machines, both versions can be built in under a minute by typing: \" make serial -j \" and \" make parallel -j \" respectively.   The object-oriented design of MFEM  separates  the mesh, finite element and linear algebra abstractions, making it easy to extend the library and adapt it to a variety of  applications .", 
            "title": "Lightweight, Portable and Easily Extendable"
        }, 
        {
            "location": "/features/#open-source", 
            "text": "MFEM is an open-source software, and can be freely used under the terms of the  LGPL 2.1  license.", 
            "title": "Open Source"
        }, 
        {
            "location": "/examples/", 
            "text": "MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$']]}});\n\n\n\n\n\n\n\n\n\nExample Codes\n\n\nThis page provides a brief overview of the MFEM example codes. For\ndetailed documentation of the MFEM sources, including the examples, build the\n\nDoxygen documentation\n in the\n\ndoc\n directory, or browse the\n\nonline version\n.\n\n\nClicking on any of the categories below displays examples that contain the\ndescribed feature. \nAll examples support (arbitrarily) high-order meshes and\nfinite element spaces\n.\nThe numerical results from the example codes can be visualized using the\nGLVis visualization tool (based on MFEM). See the\n\nGLVis website\n for more details.\n\n\nUsers are encouraged to submit any example codes that they have created and\nwould like to share. \n\n\nContact a member of the MFEM team to report\n\nbugs\n\nor post\n\nquestions\n\nor comments\n.\n\n\n\n\n\n   \nEquation (PDE)\n\n   \n All\n\n   \n Laplace\n\n   \n Elasticity\n\n   \n Definite Maxwell\n\n   \n grad-div\n\n   \n Darcy\n\n   \n Advection\n\n\n\n\n\n   \nFinite Elements\n\n   \n All\n\n   \n $L_2$ discontinuous elements\n\n   \n $H^1$ nodal elements\n\n   \n $H(curl)$ Nedelec elements\n\n   \n $H(div)$ Raviart-Thomas elements\n\n   \n $H^{-1/2}$ interfacial elements\n\n\n\n\n\n\n\n   \nDiscretization\n\n   \n All\n\n   \n Galerkin FEM\n\n   \n Mixed FEM\n\n   \n Discontinuous Galerkin (DG)\n\n   \n Discont. Petrov-Galerkin (DPG)\n\n   \n Isogeometric analysis (NURBS)\n\n   \n Adaptive mesh refinement (AMR)\n\n\n\n\n\n   \nSolver\n\n   \n All\n\n   \n Jacobi\n \n\n   \n Gauss-Seidel\n \n\n   \n PCG\n \n\n   \n MINRES\n \n\n   \n Algebraic Multigrid (BoomerAMG)\n \n\n   \n Auxiliary-space Maxwell Solver (AMS)\n \n\n   \n Auxiliary-space Divergence Solver (ADS)\n \n\n   \n UMFPACK (serial direct)\n\n   \n Newton method (nonlinear solver)\n\n   \n Explicit Runge-Kutta (ODE integration)\n\n   \n Implicit Runge-Kutta (ODE integration)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1: Laplace Problem\n\n\n\n\nThis example code demonstrates the use of MFEM to define a\nsimple isoparametric finite element discretization of the\nLaplace problem $$-\\Delta u = 1$$ with homogeneous Dirichlet\nboundary conditions. Specifically, we discretize with the\nFE space coming from the mesh (linear by default, quadratic\nfor quadratic curvilinear mesh, NURBS for NURBS mesh, etc.)\n\n\nThe example highlights the use of mesh refinement, finite\nelement grid functions, as well as linear and bilinear forms\ncorresponding to the left-hand side and right-hand side of the\ndiscrete linear system. We also cover the explicit elimination\nof boundary conditions on all boundary edges, and the optional\nconnection to the \nGLVis\n tool for visualization.\n\n\nThe example has a serial (\nex1.cpp\n)\nand a parallel (\nex1p.cpp\n) version.\n\n\n\n\n\n\n\n\n\n\nExample 2: Linear Elasticity\n\n\n\n\nThis example code solves a simple linear elasticity problem\ndescribing a multi-material cantilever beam.\nSpecifically, we approximate the weak form of\n$$-{\\rm div}({\\sigma}({\\bf u})) = 0$$\nwhere\n$${\\sigma}({\\bf u}) = \\lambda\\, {\\rm div}({\\bf u})\\,I + \\mu\\,(\\nabla{\\bf u} + \\nabla{\\bf u}^T)$$\nis the stress tensor corresponding to displacement field ${\\bf u}$, and $\\lambda$ and $\\mu$\nare the material Lame constants. The boundary conditions are\n${\\bf u}=0$ on the fixed part of the boundary with attribute 1, and\n${\\sigma}({\\bf u})\\cdot n = f$ on the remainder with $f$ being\na constant pull down vector on boundary elements with attribute 2, and zero\notherwise. The geometry of the domain is assumed to be as follows:\n\n\n\n\nThe example demonstrates the use of high-order and NURBS vector\nfinite element spaces with the linear elasticity bilinear form,\nmeshes with curved elements, and the definition of piece-wise\nconstant and vector coefficient objects.\n\n\nThe example has a serial (\nex2.cpp\n) \nand a parallel (\nex2p.cpp\n) version.\nWe recommend viewing Example 1 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 3: Definite Maxwell Problem\n\n\n\n\nThis example code solves a simple 3D electromagnetic diffusion\nproblem corresponding to the second order definite Maxwell\nequation $${\\rm curl\\, curl}\\, E + E = f$$\nwith boundary condition $ E \\times n $ = \"given tangential field\".\nHere, we use a given exact solution $E$ and compute the corresponding r.h.s.\n$f$. We discretize with Nedelec finite elements.\n\n\nThe example demonstrates the use of $H(curl)$ finite element\nspaces with the curl-curl and the (vector finite element) mass\nbilinear form, as well as the computation of discretization\nerror when the exact solution is known.\n\n\nThe example has a serial (\nex3.cpp\n)\nand a parallel (\nex3p.cpp\n) version.\nWe recommend viewing examples 1-2 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 4: grad-div Problem\n\n\n\n\nThis example code solves a simple 2D/3D $H(div)$\ndiffusion problem corresponding to the second order definite equation\n$$-{\\rm grad}(\\alpha\\,{\\rm div}(F)) + \\beta F = f$$\nwith boundary condition $F \\cdot n$ = \"given normal field\".\nHere we use a given exact solution $F$ and compute the corresponding \nright hand side $f$.  We discretize with the Raviart-Thomas finite elements.\n\n\nThe example demonstrates the use of $H(div)$\nfinite element spaces with the grad-div and $H(div)$\nvector finite element mass bilinear form, as well as the computation of discretization\nerror when the exact solution is known.\n\n\nThe example has a serial (\nex4.cpp\n)\nand a parallel (\nex4p.cpp\n) version.\nWe recommend viewing examples 1-3 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 5: Darcy Problem\n\n\n\n\nThis example code solves a simple 2D/3D mixed Darcy problem\ncorresponding to the saddle point system\n$$ \\begin{array}{rcl}\n   k\\,{\\bf u} + {\\rm grad}\\,p \n=\n f \\\\\n   -{\\rm div}\\,{\\bf u} \n=\n g\n\\end{array} $$\nwith natural boundary condition $-p = $ \"given pressure\".\nHere we use a given exact solution $({\\bf u},p)$ and compute the\ncorresponding right hand side $(f, g)$. We discretize with Raviart-Thomas\nfinite elements (velocity $\\bf u$) and piecewise discontinuous\npolynomials (pressure $p$).\n\n\nThe example demonstrates the use of the BlockMatrix and BlockOperator\nclasses, as well as the collective saving of several grid functions in\na \nVisIt\n visualization format.\n\n\nThe example has a serial (\nex5.cpp\n)\nand a parallel (\nex5p.cpp\n) version.\nWe recommend viewing examples 1-4 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 6: Laplace Problem with AMR\n\n\n\n\nThis is a version of Example 1 with a simple adaptive mesh\nrefinement loop. The problem being solved is again the Laplace\nequation $$-\\Delta u = 1$$ with homogeneous Dirichlet boundary\nconditions. The problem is solved on a sequence of meshes which\nare locally refined in a conforming (triangles, tetrahedrons)\nor non-conforming (quadrilateral, hexahedrons) manner according\nto a simple ZZ error estimator.\n\n\nThe example demonstrates MFEM's capability to work with both\nconforming and nonconforming refinements, in 2D and 3D, on\nlinear, curved and surface meshes. Interpolation of functions\nfrom coarse to fine meshes, as well as persistent \nGLVis\n\nvisualization are also illustrated.\n\n\nThe example currently has only a serial version (\nex6.cpp\n).\nWe recommend viewing Example 1 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 7: Surface Meshes\n\n\n\n\nThis example code demonstrates the use of MFEM to define a\ntriangulation of a unit sphere and a simple isoparametric\nfinite element discretization of the Laplace problem with mass\nterm, $$-\\Delta u + u = f.$$\n\n\nThe example highlights mesh generation, the use of mesh\nrefinement, high-order meshes and finite elements, as well as\nsurface-based linear and bilinear forms corresponding to the\nleft-hand side and right-hand side of the discrete linear\nsystem.\n\n\nThe example has a serial (\nex7.cpp\n)\nand a parallel (\nex7p.cpp\n) version.\nWe recommend viewing Example 1 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 8: DPG for the Laplace Problem\n\n\n\n\nThis example code demonstrates the use of the Discontinuous\nPetrov-Galerkin (DPG) method in its primal 2x2 block form as a\nsimple finite element discretization of the Laplace problem\n$$-\\Delta u = f$$ with homogeneous Dirichlet boundary conditions. We\nuse high-order continuous trial space, a high-order interfacial\n(trace) space, and a high-order discontinuous test space\ndefining a local dual ($H^{-1}$) norm.\n\n\nThe example highlights the use of interfacial (trace) finite\nelements and spaces, trace face integrators and the definition\nof block operators and preconditioners.\n\n\nThe example has a serial (\nex8.cpp\n)\nand a parallel (\nex8p.cpp\n) version.\nWe recommend viewing examples 1-5 before viewing this example.\n\n\n\n\n\n\n\n\n\n\nExample 9: DG Advection\n\n\n\n\nThis example code solves the time-dependent advection equation\n$$\\frac{du}{dt} = v \\cdot \\nabla u,$$ where $v$ is a given fluid\nvelocity, and $u_0(x)=u(0,x)$ is a given initial condition.\n\n\nThe example demonstrates the use of Discontinuous Galerkin (DG) bilinear forms\nin MFEM (face integrators), the use of explicit ODE time integrators, the\ndefinition of periodic boundary conditions through periodic meshes, as well as\nthe use of \nGLVis\n for persistent\nvisualization of a time-evolving solution. The saving of time-dependent data\nfiles for external visualization with \nVisIt\n\nis also illustrated.\n\n\nThe example has a serial (\nex9.cpp\n)\nand a parallel (\nex9p.cpp\n) version.\n\n\n\n\n\n\n\n\n\n\nExample 10: Nonlinear Elasticity\n\n\n\n\nThis examples solves a time dependent nonlinear elasticity problem of the form\n$$ \\frac{dv}{dt} = H(x) + S v\\,,\\qquad \\frac{dx}{dt} = v\\,, $$\nwhere $H$ is a hyperelastic model and $S$ is a viscosity operator of\nLaplacian type. The geometry of the domain is assumed to be as follows:\n\n\n\n\nThe example demonstrates the use of nonlinear operators, as well as their\nimplicit time integration using a Newton method for solving an associated\nreduced backward-Euler type nonlinear equation. Each Newton step requires the\ninversion of a Jacobian matrix, which is done through a (preconditioned) inner\nsolver.\n\n\nThe example has a serial (\nex10.cpp\n)\nand a parallel (\nex10p.cpp\n) version.\nWe recommend viewing examples 2 and 9 before viewing this example.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo examples match your criteria.\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--\nfunction isChecked(id)\n{\n    return document.getElementById(id).checked;\n}\n\nfunction setChecked(id, value)\n{\n    document.getElementById(id).checked = value;\n}\n\nfunction showElement(id, show)\n{\n    //document.getElementById(id).style.display = show ? \"block\" : \"none\";\n\n    // workaround because Doxygen splits and duplicates the divs for some reason\n    var divs = document.getElementsByTagName(\"div\");\n    for (i = 0; i < divs.length; i++)\n        if (divs.item(i).id == id)\n            divs.item(i).style.display = show ? \"block\" : \"none\";\n}\n\nfunction updateGroup(names, id)\n{\n   // make only one box checked in the group\n   if (names.indexOf(id) != -1)\n      for (i = 0; i < names.length; ++i)\n         setChecked(names[i], id == names[i]);\n\n   // generate boolean variables from the group names\n   for (i = 0; i < names.length; ++i)\n      this[names[i]] = isChecked(names[i]) || isChecked(names[0]);\n}\n\nfunction elementVisible(id)\n{\n   var elem = document.getElementById(id);\n   return elem != null && elem.style.display != \"none\";\n}\n\nfunction exampleVisible(num)\n{\n   return elementVisible(\"ex\"+num);// || elementVisible(\"ex\"+num+\"p\");\n}\n\nfunction update(id)\n{\n   var group1 = [\"all1\", \"laplace\", \"elasticity\", \"maxwell\", \"graddiv\", \"darcy\", \"advection\"];\n   var group2 = [\"all2\", \"l2\", \"h1\", \"hcurl\", \"hdiv\", \"h12\"];\n   var group3 = [\"all3\", \"galerkin\", \"mixed\", \"dg\", \"dpg\", \"nurbs\", \"amr\" ];\n   var group4 = [\"all4\", \"jacobi\", \"gs\", \"pcg\", \"minres\", \"amg\", \"ams\", \"ads\", \"umfpack\", \"newton\", \"rk\", \"sdirk\"];\n\n   updateGroup(group1, id);\n   updateGroup(group2, id);\n   updateGroup(group3, id);\n   updateGroup(group4, id);\n\n   showElement(\"ex1\",  laplace && h1 && (galerkin || nurbs) && (gs || pcg || umfpack || amg));\n   showElement(\"ex2\",  elasticity && h1 && (galerkin || nurbs) && (gs || pcg || umfpack || amg));\n   showElement(\"ex3\",  maxwell && hcurl && galerkin && (gs || pcg || umfpack || ams));\n   showElement(\"ex4\",  graddiv && hdiv && galerkin && (gs || pcg || umfpack || ads || ams));\n   showElement(\"ex5\",  darcy && (l2 || hdiv) && mixed && (gs || jacobi || minres || umfpack || amg ));\n   showElement(\"ex6\",  laplace && h1 && (galerkin || nurbs || amr) && (gs || pcg || umfpack));\n   showElement(\"ex7\",  laplace && h1 && galerkin && (gs || pcg || umfpack || amg));\n   showElement(\"ex8\",  laplace && (l2 || h1 || h12) && dpg && (gs || pcg || umfpack || amg));\n   showElement(\"ex9\",  advection && l2 && dg && (pcg || rk));\n   showElement(\"ex10\", elasticity && (l2 || h1) && galerkin && (jacobi || pcg || minres || umfpack || newton || rk || sdirk));\n\n   // NOTE: update 'numExamples' below when adding examples!\n   var numExamples = 10;\n   var allHidden = true;\n   for (i = 1; i <= numExamples; i++) {\n      if (exampleVisible(i)) {\n         allHidden = false;\n         break;\n      }\n   }\n   showElement(\"nomatch\", allHidden);\n}\n\nfunction initButtons()\n{\n   var query = location.search.substr(1);\n   query.split(\"&\").forEach(function(id)\n   {\n      setChecked(id, true);\n      update(id);\n   });\n}\n\n// make sure \"no match\" div is not visible after page is loaded\nwindow.onload = update;\n\n// force vertical scrollbar\ndocument.getElementsByTagName(\"body\")[0].style = \"overflow-y: scroll\"\n\n// parse URL part after '?', e.g., http://.../index.html?elasticity&nurbs\ninitButtons();\n\n//-->", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#example-codes", 
            "text": "This page provides a brief overview of the MFEM example codes. For\ndetailed documentation of the MFEM sources, including the examples, build the Doxygen documentation  in the doc  directory, or browse the online version .  Clicking on any of the categories below displays examples that contain the\ndescribed feature.  All examples support (arbitrarily) high-order meshes and\nfinite element spaces .\nThe numerical results from the example codes can be visualized using the\nGLVis visualization tool (based on MFEM). See the GLVis website  for more details.  Users are encouraged to submit any example codes that they have created and\nwould like to share.   Contact a member of the MFEM team to report bugs \nor post questions \nor comments .   \n    Equation (PDE) \n     All \n     Laplace \n     Elasticity \n     Definite Maxwell \n     grad-div \n     Darcy \n     Advection   \n    Finite Elements \n     All \n     $L_2$ discontinuous elements \n     $H^1$ nodal elements \n     $H(curl)$ Nedelec elements \n     $H(div)$ Raviart-Thomas elements \n     $H^{-1/2}$ interfacial elements    \n    Discretization \n     All \n     Galerkin FEM \n     Mixed FEM \n     Discontinuous Galerkin (DG) \n     Discont. Petrov-Galerkin (DPG) \n     Isogeometric analysis (NURBS) \n     Adaptive mesh refinement (AMR)   \n    Solver \n     All \n     Jacobi   \n     Gauss-Seidel   \n     PCG   \n     MINRES   \n     Algebraic Multigrid (BoomerAMG)   \n     Auxiliary-space Maxwell Solver (AMS)   \n     Auxiliary-space Divergence Solver (ADS)   \n     UMFPACK (serial direct) \n     Newton method (nonlinear solver) \n     Explicit Runge-Kutta (ODE integration) \n     Implicit Runge-Kutta (ODE integration)", 
            "title": "Example Codes"
        }, 
        {
            "location": "/examples/#example-1-laplace-problem", 
            "text": "This example code demonstrates the use of MFEM to define a\nsimple isoparametric finite element discretization of the\nLaplace problem $$-\\Delta u = 1$$ with homogeneous Dirichlet\nboundary conditions. Specifically, we discretize with the\nFE space coming from the mesh (linear by default, quadratic\nfor quadratic curvilinear mesh, NURBS for NURBS mesh, etc.)  The example highlights the use of mesh refinement, finite\nelement grid functions, as well as linear and bilinear forms\ncorresponding to the left-hand side and right-hand side of the\ndiscrete linear system. We also cover the explicit elimination\nof boundary conditions on all boundary edges, and the optional\nconnection to the  GLVis  tool for visualization.  The example has a serial ( ex1.cpp )\nand a parallel ( ex1p.cpp ) version.", 
            "title": "Example 1: Laplace Problem"
        }, 
        {
            "location": "/examples/#example-2-linear-elasticity", 
            "text": "This example code solves a simple linear elasticity problem\ndescribing a multi-material cantilever beam.\nSpecifically, we approximate the weak form of\n$$-{\\rm div}({\\sigma}({\\bf u})) = 0$$\nwhere\n$${\\sigma}({\\bf u}) = \\lambda\\, {\\rm div}({\\bf u})\\,I + \\mu\\,(\\nabla{\\bf u} + \\nabla{\\bf u}^T)$$\nis the stress tensor corresponding to displacement field ${\\bf u}$, and $\\lambda$ and $\\mu$\nare the material Lame constants. The boundary conditions are\n${\\bf u}=0$ on the fixed part of the boundary with attribute 1, and\n${\\sigma}({\\bf u})\\cdot n = f$ on the remainder with $f$ being\na constant pull down vector on boundary elements with attribute 2, and zero\notherwise. The geometry of the domain is assumed to be as follows:  \n\nThe example demonstrates the use of high-order and NURBS vector\nfinite element spaces with the linear elasticity bilinear form,\nmeshes with curved elements, and the definition of piece-wise\nconstant and vector coefficient objects.  The example has a serial ( ex2.cpp ) \nand a parallel ( ex2p.cpp ) version.\nWe recommend viewing Example 1 before viewing this example.", 
            "title": "Example 2: Linear Elasticity"
        }, 
        {
            "location": "/examples/#example-3-definite-maxwell-problem", 
            "text": "This example code solves a simple 3D electromagnetic diffusion\nproblem corresponding to the second order definite Maxwell\nequation $${\\rm curl\\, curl}\\, E + E = f$$\nwith boundary condition $ E \\times n $ = \"given tangential field\".\nHere, we use a given exact solution $E$ and compute the corresponding r.h.s.\n$f$. We discretize with Nedelec finite elements.  The example demonstrates the use of $H(curl)$ finite element\nspaces with the curl-curl and the (vector finite element) mass\nbilinear form, as well as the computation of discretization\nerror when the exact solution is known.  The example has a serial ( ex3.cpp )\nand a parallel ( ex3p.cpp ) version.\nWe recommend viewing examples 1-2 before viewing this example.", 
            "title": "Example 3: Definite Maxwell Problem"
        }, 
        {
            "location": "/examples/#example-4-grad-div-problem", 
            "text": "This example code solves a simple 2D/3D $H(div)$\ndiffusion problem corresponding to the second order definite equation\n$$-{\\rm grad}(\\alpha\\,{\\rm div}(F)) + \\beta F = f$$\nwith boundary condition $F \\cdot n$ = \"given normal field\".\nHere we use a given exact solution $F$ and compute the corresponding \nright hand side $f$.  We discretize with the Raviart-Thomas finite elements.  The example demonstrates the use of $H(div)$\nfinite element spaces with the grad-div and $H(div)$\nvector finite element mass bilinear form, as well as the computation of discretization\nerror when the exact solution is known.  The example has a serial ( ex4.cpp )\nand a parallel ( ex4p.cpp ) version.\nWe recommend viewing examples 1-3 before viewing this example.", 
            "title": "Example 4: grad-div Problem"
        }, 
        {
            "location": "/examples/#example-5-darcy-problem", 
            "text": "This example code solves a simple 2D/3D mixed Darcy problem\ncorresponding to the saddle point system\n$$ \\begin{array}{rcl}\n   k\\,{\\bf u} + {\\rm grad}\\,p  =  f \\\\\n   -{\\rm div}\\,{\\bf u}  =  g\n\\end{array} $$\nwith natural boundary condition $-p = $ \"given pressure\".\nHere we use a given exact solution $({\\bf u},p)$ and compute the\ncorresponding right hand side $(f, g)$. We discretize with Raviart-Thomas\nfinite elements (velocity $\\bf u$) and piecewise discontinuous\npolynomials (pressure $p$).  The example demonstrates the use of the BlockMatrix and BlockOperator\nclasses, as well as the collective saving of several grid functions in\na  VisIt  visualization format.  The example has a serial ( ex5.cpp )\nand a parallel ( ex5p.cpp ) version.\nWe recommend viewing examples 1-4 before viewing this example.", 
            "title": "Example 5: Darcy Problem"
        }, 
        {
            "location": "/examples/#example-6-laplace-problem-with-amr", 
            "text": "This is a version of Example 1 with a simple adaptive mesh\nrefinement loop. The problem being solved is again the Laplace\nequation $$-\\Delta u = 1$$ with homogeneous Dirichlet boundary\nconditions. The problem is solved on a sequence of meshes which\nare locally refined in a conforming (triangles, tetrahedrons)\nor non-conforming (quadrilateral, hexahedrons) manner according\nto a simple ZZ error estimator.  The example demonstrates MFEM's capability to work with both\nconforming and nonconforming refinements, in 2D and 3D, on\nlinear, curved and surface meshes. Interpolation of functions\nfrom coarse to fine meshes, as well as persistent  GLVis \nvisualization are also illustrated.  The example currently has only a serial version ( ex6.cpp ).\nWe recommend viewing Example 1 before viewing this example.", 
            "title": "Example 6: Laplace Problem with AMR"
        }, 
        {
            "location": "/examples/#example-7-surface-meshes", 
            "text": "This example code demonstrates the use of MFEM to define a\ntriangulation of a unit sphere and a simple isoparametric\nfinite element discretization of the Laplace problem with mass\nterm, $$-\\Delta u + u = f.$$  The example highlights mesh generation, the use of mesh\nrefinement, high-order meshes and finite elements, as well as\nsurface-based linear and bilinear forms corresponding to the\nleft-hand side and right-hand side of the discrete linear\nsystem.  The example has a serial ( ex7.cpp )\nand a parallel ( ex7p.cpp ) version.\nWe recommend viewing Example 1 before viewing this example.", 
            "title": "Example 7: Surface Meshes"
        }, 
        {
            "location": "/examples/#example-8-dpg-for-the-laplace-problem", 
            "text": "This example code demonstrates the use of the Discontinuous\nPetrov-Galerkin (DPG) method in its primal 2x2 block form as a\nsimple finite element discretization of the Laplace problem\n$$-\\Delta u = f$$ with homogeneous Dirichlet boundary conditions. We\nuse high-order continuous trial space, a high-order interfacial\n(trace) space, and a high-order discontinuous test space\ndefining a local dual ($H^{-1}$) norm.  The example highlights the use of interfacial (trace) finite\nelements and spaces, trace face integrators and the definition\nof block operators and preconditioners.  The example has a serial ( ex8.cpp )\nand a parallel ( ex8p.cpp ) version.\nWe recommend viewing examples 1-5 before viewing this example.", 
            "title": "Example 8: DPG for the Laplace Problem"
        }, 
        {
            "location": "/examples/#example-9-dg-advection", 
            "text": "This example code solves the time-dependent advection equation\n$$\\frac{du}{dt} = v \\cdot \\nabla u,$$ where $v$ is a given fluid\nvelocity, and $u_0(x)=u(0,x)$ is a given initial condition.  The example demonstrates the use of Discontinuous Galerkin (DG) bilinear forms\nin MFEM (face integrators), the use of explicit ODE time integrators, the\ndefinition of periodic boundary conditions through periodic meshes, as well as\nthe use of  GLVis  for persistent\nvisualization of a time-evolving solution. The saving of time-dependent data\nfiles for external visualization with  VisIt \nis also illustrated.  The example has a serial ( ex9.cpp )\nand a parallel ( ex9p.cpp ) version.", 
            "title": "Example 9: DG Advection"
        }, 
        {
            "location": "/examples/#example-10-nonlinear-elasticity", 
            "text": "This examples solves a time dependent nonlinear elasticity problem of the form\n$$ \\frac{dv}{dt} = H(x) + S v\\,,\\qquad \\frac{dx}{dt} = v\\,, $$\nwhere $H$ is a hyperelastic model and $S$ is a viscosity operator of\nLaplacian type. The geometry of the domain is assumed to be as follows:  \n\nThe example demonstrates the use of nonlinear operators, as well as their\nimplicit time integration using a Newton method for solving an associated\nreduced backward-Euler type nonlinear equation. Each Newton step requires the\ninversion of a Jacobian matrix, which is done through a (preconditioned) inner\nsolver.  The example has a serial ( ex10.cpp )\nand a parallel ( ex10p.cpp ) version.\nWe recommend viewing examples 2 and 9 before viewing this example.        \nNo examples match your criteria.      <!--\nfunction isChecked(id)\n{\n    return document.getElementById(id).checked;\n}\n\nfunction setChecked(id, value)\n{\n    document.getElementById(id).checked = value;\n}\n\nfunction showElement(id, show)\n{\n    //document.getElementById(id).style.display = show ? \"block\" : \"none\";\n\n    // workaround because Doxygen splits and duplicates the divs for some reason\n    var divs = document.getElementsByTagName(\"div\");\n    for (i = 0; i < divs.length; i++)\n        if (divs.item(i).id == id)\n            divs.item(i).style.display = show ? \"block\" : \"none\";\n}\n\nfunction updateGroup(names, id)\n{\n   // make only one box checked in the group\n   if (names.indexOf(id) != -1)\n      for (i = 0; i < names.length; ++i)\n         setChecked(names[i], id == names[i]);\n\n   // generate boolean variables from the group names\n   for (i = 0; i < names.length; ++i)\n      this[names[i]] = isChecked(names[i]) || isChecked(names[0]);\n}\n\nfunction elementVisible(id)\n{\n   var elem = document.getElementById(id);\n   return elem != null && elem.style.display != \"none\";\n}\n\nfunction exampleVisible(num)\n{\n   return elementVisible(\"ex\"+num);// || elementVisible(\"ex\"+num+\"p\");\n}\n\nfunction update(id)\n{\n   var group1 = [\"all1\", \"laplace\", \"elasticity\", \"maxwell\", \"graddiv\", \"darcy\", \"advection\"];\n   var group2 = [\"all2\", \"l2\", \"h1\", \"hcurl\", \"hdiv\", \"h12\"];\n   var group3 = [\"all3\", \"galerkin\", \"mixed\", \"dg\", \"dpg\", \"nurbs\", \"amr\" ];\n   var group4 = [\"all4\", \"jacobi\", \"gs\", \"pcg\", \"minres\", \"amg\", \"ams\", \"ads\", \"umfpack\", \"newton\", \"rk\", \"sdirk\"];\n\n   updateGroup(group1, id);\n   updateGroup(group2, id);\n   updateGroup(group3, id);\n   updateGroup(group4, id);\n\n   showElement(\"ex1\",  laplace && h1 && (galerkin || nurbs) && (gs || pcg || umfpack || amg));\n   showElement(\"ex2\",  elasticity && h1 && (galerkin || nurbs) && (gs || pcg || umfpack || amg));\n   showElement(\"ex3\",  maxwell && hcurl && galerkin && (gs || pcg || umfpack || ams));\n   showElement(\"ex4\",  graddiv && hdiv && galerkin && (gs || pcg || umfpack || ads || ams));\n   showElement(\"ex5\",  darcy && (l2 || hdiv) && mixed && (gs || jacobi || minres || umfpack || amg ));\n   showElement(\"ex6\",  laplace && h1 && (galerkin || nurbs || amr) && (gs || pcg || umfpack));\n   showElement(\"ex7\",  laplace && h1 && galerkin && (gs || pcg || umfpack || amg));\n   showElement(\"ex8\",  laplace && (l2 || h1 || h12) && dpg && (gs || pcg || umfpack || amg));\n   showElement(\"ex9\",  advection && l2 && dg && (pcg || rk));\n   showElement(\"ex10\", elasticity && (l2 || h1) && galerkin && (jacobi || pcg || minres || umfpack || newton || rk || sdirk));\n\n   // NOTE: update 'numExamples' below when adding examples!\n   var numExamples = 10;\n   var allHidden = true;\n   for (i = 1; i <= numExamples; i++) {\n      if (exampleVisible(i)) {\n         allHidden = false;\n         break;\n      }\n   }\n   showElement(\"nomatch\", allHidden);\n}\n\nfunction initButtons()\n{\n   var query = location.search.substr(1);\n   query.split(\"&\").forEach(function(id)\n   {\n      setChecked(id, true);\n      update(id);\n   });\n}\n\n// make sure \"no match\" div is not visible after page is loaded\nwindow.onload = update;\n\n// force vertical scrollbar\ndocument.getElementsByTagName(\"body\")[0].style = \"overflow-y: scroll\"\n\n// parse URL part after '?', e.g., http://.../index.html?elasticity&nurbs\ninitButtons();\n\n//-->", 
            "title": "Example 10: Nonlinear Elasticity"
        }, 
        {
            "location": "/building/", 
            "text": "Building MFEM\n\n\nA simple tutorial how to build and run the serial and parallel version of MFEM together with GLVis. For more details, see the \nINSTALL\n file and \nmake help\n.\n\n\nInstructions\n\n\nDownload MFEM and GLVis\n\n\n\n\nhttp://mfem.org\n\n\nhttp://glvis.org\n\n\n\n\nBelow we assume that we are working with versions 3.0.\n\n\nSerial version of MFEM and GLVis\n\n\nPut everything in the same directory:\n\n\n~\n ls\nglvis-3.0.tgz   mfem-3.0.tgz\n\n\n\nBuild the serial version of MFEM:\n\n\n~\n tar -zxvf mfem-3.0.tgz\n~\n cd mfem-3.0\n~/mfem-3.0\n make serial -j\n\n\n\nBuild GLVis:\n\n\n~\n tar -zxvf glvis-3.0.tgz\n~\n cd glvis-3.0\n~/glvis-3.0\n make MFEM_DIR=../mfem-3.0 -j\n\n\n\nThat's it! The MFEM library can be found in \nmfem-3.0/libmfem.a\n, while the \nglvis\n executable will be in the \nglvis-3.0\n directory.\n\n\nTo start a GLVis server, open a \nnew terminal\n and type\n\n\n~\n cd glvis-3.0\n~/glvis-3.0\n ./glvis\n\n\nThe serial examples can be build with:\n\n\n~\n cd mfem-3.0/examples\n~/mfem-3.0/examples\n make -j\n\n\n\nParallel MPI version of MFEM\n\n\nDownload \nhypre\n and metis from\n\n\n\n\nhttps://computation.llnl.gov/casc/hypre/software.html\n\n\nhttp://glaros.dtc.umn.edu/gkhome/metis/metis/download\n\n\n\n\nBelow we assume that we are working with versions 2.10.0b and 4.0.3 respectively. We also assume that the serial version of MFEM and GLVis have been built as described above.\n\n\nPut everything in the same directory:\n\n\n~\n ls\nglvis-3.0/  hypre-2.10.0b.tar.gz   metis-4.0.tar.gz   mfem-3.0/\n\n\n\nBuild hypre:\n\n\n~\n tar -zxvf hypre-2.10.0b.tar.gz\n~\n cd hypre-2.10.0b/src/\n~/hypre-2.10.0b/src\n ./configure --disable-fortran\n~/hypre-2.10.0b/src\n make -j\n~/hypre-2.10.0b/src\n cd ../..\n\n\n\nBuild metis:\n\n\n~\n tar -zxvf metis-4.0.3.tar.gz\n~\n cd metis-4.0.3\n~/metis-4.0.3\n make\n~/metis-4.0.3\n cd ..\n~\n ln -s metis-4.0.3 metis-4.0\n\n\n\nBuild the parallel version of MFEM:\n\n\n~\n cd mfem-3.0\n~/mfem-3.0\n make parallel -j\n\n\n\nNote that if hypre or metis are in different locations, or you have different versions of these libraries, you will need to update the corresponding paths in the \nmakefile\n (or create you own \nuser.mk\n file as described in the \nINSTALL\n).\n\n\nThe parallel examples can be build with:\n\n\n~\n cd mfem-3.0/examples\n~/mfem-3.0/examples\n make -j\n\n\n\nThe serial examples can also be build with the the parallel version of the library, e.g.\n\n\n~/mfem-3.0/examples\n make ex1 ex2\n\n\n\nOne can also use the parallel library to optionally (re-)build GLVis:\n\n\n~\n cd glvis-3.0\n~/glvis-3.0\n make clean\n~/glvis-3.0\n make MFEM_DIR=../mfem-3.0 -j", 
            "title": "Building MFEM"
        }, 
        {
            "location": "/building/#building-mfem", 
            "text": "A simple tutorial how to build and run the serial and parallel version of MFEM together with GLVis. For more details, see the  INSTALL  file and  make help .", 
            "title": "Building MFEM"
        }, 
        {
            "location": "/building/#instructions", 
            "text": "Download MFEM and GLVis   http://mfem.org  http://glvis.org   Below we assume that we are working with versions 3.0.", 
            "title": "Instructions"
        }, 
        {
            "location": "/building/#serial-version-of-mfem-and-glvis", 
            "text": "Put everything in the same directory: \n~  ls\nglvis-3.0.tgz   mfem-3.0.tgz  Build the serial version of MFEM: \n~  tar -zxvf mfem-3.0.tgz\n~  cd mfem-3.0\n~/mfem-3.0  make serial -j  Build GLVis: \n~  tar -zxvf glvis-3.0.tgz\n~  cd glvis-3.0\n~/glvis-3.0  make MFEM_DIR=../mfem-3.0 -j  That's it! The MFEM library can be found in  mfem-3.0/libmfem.a , while the  glvis  executable will be in the  glvis-3.0  directory.  To start a GLVis server, open a  new terminal  and type \n~  cd glvis-3.0\n~/glvis-3.0  ./glvis \nThe serial examples can be build with: \n~  cd mfem-3.0/examples\n~/mfem-3.0/examples  make -j", 
            "title": "Serial version of MFEM and GLVis"
        }, 
        {
            "location": "/building/#parallel-mpi-version-of-mfem", 
            "text": "Download  hypre  and metis from   https://computation.llnl.gov/casc/hypre/software.html  http://glaros.dtc.umn.edu/gkhome/metis/metis/download   Below we assume that we are working with versions 2.10.0b and 4.0.3 respectively. We also assume that the serial version of MFEM and GLVis have been built as described above.  Put everything in the same directory: \n~  ls\nglvis-3.0/  hypre-2.10.0b.tar.gz   metis-4.0.tar.gz   mfem-3.0/  Build hypre: \n~  tar -zxvf hypre-2.10.0b.tar.gz\n~  cd hypre-2.10.0b/src/\n~/hypre-2.10.0b/src  ./configure --disable-fortran\n~/hypre-2.10.0b/src  make -j\n~/hypre-2.10.0b/src  cd ../..  Build metis: \n~  tar -zxvf metis-4.0.3.tar.gz\n~  cd metis-4.0.3\n~/metis-4.0.3  make\n~/metis-4.0.3  cd ..\n~  ln -s metis-4.0.3 metis-4.0  Build the parallel version of MFEM: \n~  cd mfem-3.0\n~/mfem-3.0  make parallel -j  Note that if hypre or metis are in different locations, or you have different versions of these libraries, you will need to update the corresponding paths in the  makefile  (or create you own  user.mk  file as described in the  INSTALL ).  The parallel examples can be build with: \n~  cd mfem-3.0/examples\n~/mfem-3.0/examples  make -j  The serial examples can also be build with the the parallel version of the library, e.g. \n~/mfem-3.0/examples  make ex1 ex2  One can also use the parallel library to optionally (re-)build GLVis: \n~  cd glvis-3.0\n~/glvis-3.0  make clean\n~/glvis-3.0  make MFEM_DIR=../mfem-3.0 -j", 
            "title": "Parallel MPI version of MFEM"
        }, 
        {
            "location": "/serial-tutorial/", 
            "text": "Serial Tutorial\n\n\nSummary\n\n\nThis tutorial illustrates the building and sample use of the following MFEM serial example codes:\n\n\n\n\nExample 1\n\n\nExample 2\n\n\nExample 3\n\n\n\n\nAn interactive documentation of all example codes is available \nhere\n.\n\n\nBuilding\n\n\nFollow the \nserial instructions\n to build the MFEM library and to start a GLVis server. The latter is the recommended visualization software for MFEM (though its use is optional).\n\n\nTo build the serial example codes, type \nmake\n in MFEM's examples directory:\n\n\n~/mfem/examples\n make\ng++ -O3 -I.. ex1.cpp -o ex1 -L.. -lmfem\ng++ -O3 -I.. ex2.cpp -o ex2 -L.. -lmfem\ng++ -O3 -I.. ex3.cpp -o ex3 -L.. -lmfem\ng++ -O3 -I.. ex4.cpp -o ex4 -L.. -lmfem\ng++ -O3 -I.. ex5.cpp -o ex5 -L.. -lmfem\ng++ -O3 -I.. ex6.cpp -o ex6 -L.. -lmfem\ng++ -O3 -I.. ex7.cpp -o ex7 -L.. -lmfem\ng++ -O3 -I.. ex8.cpp -o ex8 -L.. -lmfem\ng++ -O3 -I.. ex9.cpp -o ex9 -L.. -lmfem\ng++ -O3 -I.. ex10.cpp -o ex10 -L.. -lmfem\n\n\n\n\nExample 1\n\n\nThis example code demonstrates the use of MFEM to define a simple\nlinear finite element discretization of the Laplace problem\n-Delta u = 1 with homogeneous Dirichlet boundary conditions. To run it, simply specify the input mesh file (which will be refined to a final mesh with no more than 50,000 elements):\n\n\n~/mfem/examples\n ex1 -m ../data/star.mesh\n   Iteration :   0  (B r, r) = 0.00111712\n   Iteration :   1  (B r, r) = 0.00674088\n   Iteration :   2  (B r, r) = 0.0123008\n...\n   Iteration :  88  (B r, r) = 5.28955e-15\n   Iteration :  89  (B r, r) = 1.99155e-15\n   Iteration :  90  (B r, r) = 9.91309e-16\nAverage reduction factor = 0.857127\n\n\n\n\nIf a GLVis server is running, the computed finite element solution will appear in an interactive window:\n\n\n\n\nYou can examine the solution using the mouse and the GLVis \ncommand keystrokes\n.\nPressing \"\nRAfjlmm\n\", for example, will give us a 2D view without light or perspective showing the computed level lines:\n\n\n\n\nThis example saves two files called \nrefined.mesh\n and \nsol.gf\n, which represent the refined mesh and the computed solution as a grid function. These can be visualized with \nglvis -m refined.mesh -g sol.gf\n as discussed \nhere\n.\n\n\nExample 1 can be run on any mesh that is supported by MFEM, including 3D, curvilinear and VTK meshes, e.g.,\n\n\n~/mfem/examples\n ex1 -m ../data/fichera-q2.vtk\n   Iteration :   0  (B r, r) = 0.0235996\n   Iteration :   1  (B r, r) = 0.0476694\n   Iteration :   2  (B r, r) = 0.0200109\n...\n   Iteration :  27  (B r, r) = 7.77888e-14\n   Iteration :  28  (B r, r) = 2.36255e-14\n   Iteration :  29  (B r, r) = 8.56679e-15\nAverage reduction factor = 0.610261\n\n\n\n\n\n\nThe picture above shows the solution with level lines plotted in normal direction of a cutting plane, and was produced by typing \"\nAaafmIMMooo\n\" followed by cutting plane adjustments with \"\nz\n\", \"\ny\n\" and \"\nw\n\".\n\n\nExample 2\n\n\nThis example code solves a simple linear elasticity problem describing a multi-material Cantilever beam. Note that the input mesh should have at least two materials and two boundary attributes as shown below:\n\n\n               +----------+----------+\n  boundary ---\n| material | material |\n--- boundary\n  attribute 1  |    1     |    2     |     attribute 2\n  (fixed)      +----------+----------+     (pull down)\n\n\n\n\nThe example demonstrates the use of (high-order) vector finite element spaces by supporting several different discretization options:\n\n\n~/mfem/examples\n ex2 -m ../data/beam-quad.mesh -o 2\nAssembling: r.h.s. ... matrix ... done.\n   Iteration :   0  (B r, r) = 1.88755e-06\n   Iteration :   1  (B r, r) = 8.2357e-07\n   Iteration :   2  (B r, r) = 9.9098e-07\n...\n   Iteration : 498  (B r, r) = 2.78279e-11\n   Iteration : 499  (B r, r) = 3.75298e-11\n   Iteration : 500  (B r, r) = 4.95682e-11\nPCG: No convergence!\n(B r_0, r_0) = 1.88755e-06\n(B r_N, r_N) = 4.95682e-11\nNumber of PCG iterations: 500\nAverage reduction factor = 0.989508\n\n\n\n\nThe output shows the (curved) displaced mesh together with the inverse displacement vector field:\n\n\n\n\nThe above plot can be alternatively produced with:\n\n\nglvis -m displaced.mesh -g sol.gf -k \nRfjliiiiimmAbb\n\n\n\n\n\nExample 2 also works in 3D:\n\n\n~/mfem/examples\n ex2 -m ../data/beam-tet.mesh -o 3\nAssembling: r.h.s. ... matrix ... done.\n   Iteration :   0  (B r, r) = 2.7147e-06\n   Iteration :   1  (B r, r) = 1.95756e-06\n   Iteration :   2  (B r, r) = 2.24159e-06\n...\n   Iteration : 426  (B r, r) = 3.37563e-14\n   Iteration : 427  (B r, r) = 3.06198e-14\n   Iteration : 428  (B r, r) = 2.5706e-14\nAverage reduction factor = 0.978648\n\n\n\n\nOne can visualize the vector field, e.g., by pressing \"\ndbAfmeoooovvaa\n\" followed by scale and position adjustments with the mouse:\n\n\n\n\nExample 3\n\n\nThis example code solves a simple 3D electromagnetic diffusion problem corresponding to the second order definite Maxwell equation curl curl E + E = f discretized with the lowest order Nedelec finite elements. It computes the approximation error with a know exact solution, and requires a 3D input mesh:\n\n\n~/mfem/examples\n ex3 -m ../data/fichera.mesh\n   Iteration :   0  (B r, r) = 121.209\n   Iteration :   1  (B r, r) = 21.1137\n   Iteration :   2  (B r, r) = 12.6503\n...\n   Iteration : 149  (B r, r) = 2.40571e-10\n   Iteration : 150  (B r, r) = 1.39788e-10\n   Iteration : 151  (B r, r) = 9.43635e-11\nAverage reduction factor = 0.911811\n\n|| E_h - E ||_{L^2} = 0.00976655\n\n\n\n\nTo visualize the magnitude of the solution with the proportionally-sized vector field shown only on the boundary of the domain, type \"\nVfooogt\n\" in the GLVis window (or run \nglvis -m refined.mesh -g sol.gf -k \"Vfooogt\"\n):\n\n\n\n\nCurved meshes are also supported:\n\n\n~/mfem/examples\n ex3 -m ../data/fichera-q3.mesh\n   Iteration :   0  (B r, r) = 135.613\n   Iteration :   1  (B r, r) = 22.3785\n   Iteration :   2  (B r, r) = 12.5215\n...\n   Iteration : 168  (B r, r) = 4.95911e-10\n   Iteration : 169  (B r, r) = 2.23499e-10\n   Iteration : 170  (B r, r) = 1.25714e-10\nAverage reduction factor = 0.921741\n\n|| E_h - E ||_{L^2} = 0.0821686\n\n\n\n\n\n\n\nTo visualize the entire vector field, type \"\nfooogtevv\n\" instead, which will use uniform sized arrows colored according to their magnitude. Here is the corresponding plot from \"\nex3 -m ../data/beam-hex.mesh\n\":\n\n\n\n\nSince entire vector fields in 3D might be difficult to see, a good alternative might be to plot the separate components of the field as scalar functions. For example:\n\n\n~/mfem/examples\n ex3 -m ../data/escher.mesh\n   Iteration :   0  (B r, r) = 348.797\n   Iteration :   1  (B r, r) = 32.0699\n   Iteration :   2  (B r, r) = 14.902\n...\n   Iteration : 159  (B r, r) = 4.16076e-10\n   Iteration : 160  (B r, r) = 3.50907e-10\n   Iteration : 161  (B r, r) = 3.22923e-10\nAverage reduction factor = 0.917548\n\n|| E_h - E ||_{L^2} = 0.36541\n\n~/mfem/examples\n glvis -m refined.mesh -g sol.gf -gc 0 -k \ngooottF\n\n\n\n\n\n\n\nThe discontinuity of the Nedelec functions is clearly seen in the above plot.", 
            "title": "Serial Tutorial"
        }, 
        {
            "location": "/serial-tutorial/#serial-tutorial", 
            "text": "", 
            "title": "Serial Tutorial"
        }, 
        {
            "location": "/serial-tutorial/#summary", 
            "text": "This tutorial illustrates the building and sample use of the following MFEM serial example codes:   Example 1  Example 2  Example 3   An interactive documentation of all example codes is available  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/serial-tutorial/#building", 
            "text": "Follow the  serial instructions  to build the MFEM library and to start a GLVis server. The latter is the recommended visualization software for MFEM (though its use is optional).  To build the serial example codes, type  make  in MFEM's examples directory:  ~/mfem/examples  make\ng++ -O3 -I.. ex1.cpp -o ex1 -L.. -lmfem\ng++ -O3 -I.. ex2.cpp -o ex2 -L.. -lmfem\ng++ -O3 -I.. ex3.cpp -o ex3 -L.. -lmfem\ng++ -O3 -I.. ex4.cpp -o ex4 -L.. -lmfem\ng++ -O3 -I.. ex5.cpp -o ex5 -L.. -lmfem\ng++ -O3 -I.. ex6.cpp -o ex6 -L.. -lmfem\ng++ -O3 -I.. ex7.cpp -o ex7 -L.. -lmfem\ng++ -O3 -I.. ex8.cpp -o ex8 -L.. -lmfem\ng++ -O3 -I.. ex9.cpp -o ex9 -L.. -lmfem\ng++ -O3 -I.. ex10.cpp -o ex10 -L.. -lmfem", 
            "title": "Building"
        }, 
        {
            "location": "/serial-tutorial/#example-1", 
            "text": "This example code demonstrates the use of MFEM to define a simple\nlinear finite element discretization of the Laplace problem\n-Delta u = 1 with homogeneous Dirichlet boundary conditions. To run it, simply specify the input mesh file (which will be refined to a final mesh with no more than 50,000 elements):  ~/mfem/examples  ex1 -m ../data/star.mesh\n   Iteration :   0  (B r, r) = 0.00111712\n   Iteration :   1  (B r, r) = 0.00674088\n   Iteration :   2  (B r, r) = 0.0123008\n...\n   Iteration :  88  (B r, r) = 5.28955e-15\n   Iteration :  89  (B r, r) = 1.99155e-15\n   Iteration :  90  (B r, r) = 9.91309e-16\nAverage reduction factor = 0.857127  If a GLVis server is running, the computed finite element solution will appear in an interactive window:   You can examine the solution using the mouse and the GLVis  command keystrokes .\nPressing \" RAfjlmm \", for example, will give us a 2D view without light or perspective showing the computed level lines:   This example saves two files called  refined.mesh  and  sol.gf , which represent the refined mesh and the computed solution as a grid function. These can be visualized with  glvis -m refined.mesh -g sol.gf  as discussed  here .  Example 1 can be run on any mesh that is supported by MFEM, including 3D, curvilinear and VTK meshes, e.g.,  ~/mfem/examples  ex1 -m ../data/fichera-q2.vtk\n   Iteration :   0  (B r, r) = 0.0235996\n   Iteration :   1  (B r, r) = 0.0476694\n   Iteration :   2  (B r, r) = 0.0200109\n...\n   Iteration :  27  (B r, r) = 7.77888e-14\n   Iteration :  28  (B r, r) = 2.36255e-14\n   Iteration :  29  (B r, r) = 8.56679e-15\nAverage reduction factor = 0.610261   The picture above shows the solution with level lines plotted in normal direction of a cutting plane, and was produced by typing \" AaafmIMMooo \" followed by cutting plane adjustments with \" z \", \" y \" and \" w \".", 
            "title": "Example 1"
        }, 
        {
            "location": "/serial-tutorial/#example-2", 
            "text": "This example code solves a simple linear elasticity problem describing a multi-material Cantilever beam. Note that the input mesh should have at least two materials and two boundary attributes as shown below:                 +----------+----------+\n  boundary --- | material | material | --- boundary\n  attribute 1  |    1     |    2     |     attribute 2\n  (fixed)      +----------+----------+     (pull down)  The example demonstrates the use of (high-order) vector finite element spaces by supporting several different discretization options:  ~/mfem/examples  ex2 -m ../data/beam-quad.mesh -o 2\nAssembling: r.h.s. ... matrix ... done.\n   Iteration :   0  (B r, r) = 1.88755e-06\n   Iteration :   1  (B r, r) = 8.2357e-07\n   Iteration :   2  (B r, r) = 9.9098e-07\n...\n   Iteration : 498  (B r, r) = 2.78279e-11\n   Iteration : 499  (B r, r) = 3.75298e-11\n   Iteration : 500  (B r, r) = 4.95682e-11\nPCG: No convergence!\n(B r_0, r_0) = 1.88755e-06\n(B r_N, r_N) = 4.95682e-11\nNumber of PCG iterations: 500\nAverage reduction factor = 0.989508  The output shows the (curved) displaced mesh together with the inverse displacement vector field:   The above plot can be alternatively produced with:  glvis -m displaced.mesh -g sol.gf -k  RfjliiiiimmAbb   Example 2 also works in 3D:  ~/mfem/examples  ex2 -m ../data/beam-tet.mesh -o 3\nAssembling: r.h.s. ... matrix ... done.\n   Iteration :   0  (B r, r) = 2.7147e-06\n   Iteration :   1  (B r, r) = 1.95756e-06\n   Iteration :   2  (B r, r) = 2.24159e-06\n...\n   Iteration : 426  (B r, r) = 3.37563e-14\n   Iteration : 427  (B r, r) = 3.06198e-14\n   Iteration : 428  (B r, r) = 2.5706e-14\nAverage reduction factor = 0.978648  One can visualize the vector field, e.g., by pressing \" dbAfmeoooovvaa \" followed by scale and position adjustments with the mouse:", 
            "title": "Example 2"
        }, 
        {
            "location": "/serial-tutorial/#example-3", 
            "text": "This example code solves a simple 3D electromagnetic diffusion problem corresponding to the second order definite Maxwell equation curl curl E + E = f discretized with the lowest order Nedelec finite elements. It computes the approximation error with a know exact solution, and requires a 3D input mesh:  ~/mfem/examples  ex3 -m ../data/fichera.mesh\n   Iteration :   0  (B r, r) = 121.209\n   Iteration :   1  (B r, r) = 21.1137\n   Iteration :   2  (B r, r) = 12.6503\n...\n   Iteration : 149  (B r, r) = 2.40571e-10\n   Iteration : 150  (B r, r) = 1.39788e-10\n   Iteration : 151  (B r, r) = 9.43635e-11\nAverage reduction factor = 0.911811\n\n|| E_h - E ||_{L^2} = 0.00976655  To visualize the magnitude of the solution with the proportionally-sized vector field shown only on the boundary of the domain, type \" Vfooogt \" in the GLVis window (or run  glvis -m refined.mesh -g sol.gf -k \"Vfooogt\" ):   Curved meshes are also supported:  ~/mfem/examples  ex3 -m ../data/fichera-q3.mesh\n   Iteration :   0  (B r, r) = 135.613\n   Iteration :   1  (B r, r) = 22.3785\n   Iteration :   2  (B r, r) = 12.5215\n...\n   Iteration : 168  (B r, r) = 4.95911e-10\n   Iteration : 169  (B r, r) = 2.23499e-10\n   Iteration : 170  (B r, r) = 1.25714e-10\nAverage reduction factor = 0.921741\n\n|| E_h - E ||_{L^2} = 0.0821686   To visualize the entire vector field, type \" fooogtevv \" instead, which will use uniform sized arrows colored according to their magnitude. Here is the corresponding plot from \" ex3 -m ../data/beam-hex.mesh \":   Since entire vector fields in 3D might be difficult to see, a good alternative might be to plot the separate components of the field as scalar functions. For example:  ~/mfem/examples  ex3 -m ../data/escher.mesh\n   Iteration :   0  (B r, r) = 348.797\n   Iteration :   1  (B r, r) = 32.0699\n   Iteration :   2  (B r, r) = 14.902\n...\n   Iteration : 159  (B r, r) = 4.16076e-10\n   Iteration : 160  (B r, r) = 3.50907e-10\n   Iteration : 161  (B r, r) = 3.22923e-10\nAverage reduction factor = 0.917548\n\n|| E_h - E ||_{L^2} = 0.36541\n\n~/mfem/examples  glvis -m refined.mesh -g sol.gf -gc 0 -k  gooottF    The discontinuity of the Nedelec functions is clearly seen in the above plot.", 
            "title": "Example 3"
        }, 
        {
            "location": "/parallel-tutorial/", 
            "text": "Parallel Tutorial\n\n\nSummary\n\n\nThis tutorial illustrates the building and sample use of the following MFEM parallel example codes:\n  - \nExample 1p\n\n  - \nExample 2p\n\n  - \nExample 3p\n\n\nAn interactive documentation of all example codes is available \nhere\n.\n\n\nBuilding\n\n\nFollow the \nbuilding instructions\n to build the parallel MFEM library and to start a GLVis server. The latter is the recommended visualization software for MFEM (though its use is optional).\n\n\nTo build the parallel example codes, type \nmake\n in MFEM's examples directory:\n\n\n~/mfem/examples\n make\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex1p.cpp -o ex1p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex2p.cpp -o ex2p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex3p.cpp -o ex3p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex4p.cpp -o ex4p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex5p.cpp -o ex5p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex7p.cpp -o ex7p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex8p.cpp -o ex8p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex9p.cpp -o ex9p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex10p.cpp -o ex10p ...\n\n\n\n\nExample 1p\n\n\nThis is a parallel version of \nExample 1\n using \nhypre\n's BoomerAMG preconditioner. Run this example as follows:\n\n\n~/mfem/examples\n mpirun -np 16 ex1p -m ../data/square-disc.mesh\n...\nPCG Iterations = 26\nFinal PCG Relative Residual Norm = 4.30922e-13\n\n\n\n\nIf a GLVis server is running, the computed finite element solution \ncombined from all processors\n, will appear in an interactive window:\n\n\n\n\nYou can examine the solution using the mouse and the GLVis \ncommand keystrokes\n.\nTo view the parallel partitioning, for example, press the following keys in the GLVis window: \"RAjlmm\" followed by F11/F12 and zooming with the right mouse button.\n\n\n\n\nTo examine the solution only in one, or a few parallel subdomains, one can use the F9/F10 and the F8 keys. In 2D, one can also use press \"\nb\n\" to draw the only the boundaries between the subdomains. For example\n\n\n\n\nwas produced by\n\n\nglvis -np 16 -m mesh -g sol -k \nRAjlb\n\n\n\n\n\nfollowed by F9 and scaling/position adjustment with the mouse.\n\n\nThree-dimensional and curvilinear meshes are also supported in parallel:\n\n\n~/mfem/examples\n mpirun -np 16 ex1p -m ../data/escher-p3.mesh\n...\nPCG Iterations = 24\nFinal PCG Relative Residual Norm = 3.59964e-13\n~/mfem/examples\n glvis -np 16 -m mesh -g sol -k \nAooogtt\n\n\n\n\n\n\n\nThe continuity of the solution across the inter-processor interfaces can be seen by using a cutting plane (keys \"\nAoooiMMtmm\n\" followed by \"\nz\n\" and \"\nY\n\" adjustments):\n\n\n\n\nExample 2p\n\n\nThis is a parallel version of \nExample 2\n using the systems version of \nhypre\n's BoomerAMG preconditioner, which can be run analogous to the serial case:\n\n\n~/mfem/examples\n mpirun -np 16 ex2p -m ../data/beam-hex.mesh -o 1\n...\nPCG Iterations = 39\nFinal PCG Relative Residual Norm = 2.91528e-09\n\n\n\n\nTo view the parallel partitioning with the magnitude of the computed displacement field, type \"\nAtttaa\n\" in the GLVis window followed by subdomain shrinking with F11 and scaling adjustments with the mouse:\n\n\n\n\nExample 3p\n\n\nThis is a parallel version of \nExample 3\n using \nhypre\n's AMS preconditioner. Its use is analogous to the serial case:\n\n\n/mfem/examples\n mpirun -np 16 ex3p -m ../data/fichera-q3.mesh\n...\nPCG Iterations = 17\nFinal PCG Relative Residual Norm = 7.61595e-13\n\n|| E_h - E ||_{L^2} = 0.0821685\n\n\n\n\nNote that AMS leads to much fewer iterations than the Gauss-Seidel precondiotioner used in the serial code. The parallel subdomain partitioning can be seen with \"\nooogt\n\" and F11/F12:\n\n\n\n\nOne can also visualize individual components of the Nedelec solution and remove the elements in a cutting plane to see the surfaces corresponding to inter-processor boundaries:\n\n\nglvis -np 16 -m mesh -g sol -k \nooottmiEF", 
            "title": "Parallel Tutorial"
        }, 
        {
            "location": "/parallel-tutorial/#parallel-tutorial", 
            "text": "", 
            "title": "Parallel Tutorial"
        }, 
        {
            "location": "/parallel-tutorial/#summary", 
            "text": "This tutorial illustrates the building and sample use of the following MFEM parallel example codes:\n  -  Example 1p \n  -  Example 2p \n  -  Example 3p  An interactive documentation of all example codes is available  here .", 
            "title": "Summary"
        }, 
        {
            "location": "/parallel-tutorial/#building", 
            "text": "Follow the  building instructions  to build the parallel MFEM library and to start a GLVis server. The latter is the recommended visualization software for MFEM (though its use is optional).  To build the parallel example codes, type  make  in MFEM's examples directory:  ~/mfem/examples  make\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex1p.cpp -o ex1p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex2p.cpp -o ex2p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex3p.cpp -o ex3p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex4p.cpp -o ex4p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex5p.cpp -o ex5p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex7p.cpp -o ex7p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex8p.cpp -o ex8p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex9p.cpp -o ex9p ...\nmpicxx  -O3 -I..  -I../../hypre-2.10.0b/src/hypre/include ex10p.cpp -o ex10p ...", 
            "title": "Building"
        }, 
        {
            "location": "/parallel-tutorial/#example-1p", 
            "text": "This is a parallel version of  Example 1  using  hypre 's BoomerAMG preconditioner. Run this example as follows:  ~/mfem/examples  mpirun -np 16 ex1p -m ../data/square-disc.mesh\n...\nPCG Iterations = 26\nFinal PCG Relative Residual Norm = 4.30922e-13  If a GLVis server is running, the computed finite element solution  combined from all processors , will appear in an interactive window:   You can examine the solution using the mouse and the GLVis  command keystrokes .\nTo view the parallel partitioning, for example, press the following keys in the GLVis window: \"RAjlmm\" followed by F11/F12 and zooming with the right mouse button.   To examine the solution only in one, or a few parallel subdomains, one can use the F9/F10 and the F8 keys. In 2D, one can also use press \" b \" to draw the only the boundaries between the subdomains. For example   was produced by  glvis -np 16 -m mesh -g sol -k  RAjlb   followed by F9 and scaling/position adjustment with the mouse.  Three-dimensional and curvilinear meshes are also supported in parallel:  ~/mfem/examples  mpirun -np 16 ex1p -m ../data/escher-p3.mesh\n...\nPCG Iterations = 24\nFinal PCG Relative Residual Norm = 3.59964e-13\n~/mfem/examples  glvis -np 16 -m mesh -g sol -k  Aooogtt    The continuity of the solution across the inter-processor interfaces can be seen by using a cutting plane (keys \" AoooiMMtmm \" followed by \" z \" and \" Y \" adjustments):", 
            "title": "Example 1p"
        }, 
        {
            "location": "/parallel-tutorial/#example-2p", 
            "text": "This is a parallel version of  Example 2  using the systems version of  hypre 's BoomerAMG preconditioner, which can be run analogous to the serial case:  ~/mfem/examples  mpirun -np 16 ex2p -m ../data/beam-hex.mesh -o 1\n...\nPCG Iterations = 39\nFinal PCG Relative Residual Norm = 2.91528e-09  To view the parallel partitioning with the magnitude of the computed displacement field, type \" Atttaa \" in the GLVis window followed by subdomain shrinking with F11 and scaling adjustments with the mouse:", 
            "title": "Example 2p"
        }, 
        {
            "location": "/parallel-tutorial/#example-3p", 
            "text": "This is a parallel version of  Example 3  using  hypre 's AMS preconditioner. Its use is analogous to the serial case:  /mfem/examples  mpirun -np 16 ex3p -m ../data/fichera-q3.mesh\n...\nPCG Iterations = 17\nFinal PCG Relative Residual Norm = 7.61595e-13\n\n|| E_h - E ||_{L^2} = 0.0821685  Note that AMS leads to much fewer iterations than the Gauss-Seidel precondiotioner used in the serial code. The parallel subdomain partitioning can be seen with \" ooogt \" and F11/F12:   One can also visualize individual components of the Nedelec solution and remove the elements in a cutting plane to see the surfaces corresponding to inter-processor boundaries:  glvis -np 16 -m mesh -g sol -k  ooottmiEF", 
            "title": "Example 3p"
        }, 
        {
            "location": "/publications/", 
            "text": "Publications\n\n\nGoogle Scholar citations\n\n\n\n\nRecent\n\n\nAll time\n\n\n\n\nSelected Publications\n\n\n\n\nTz. Kolev, J. Xu and Y. Zhu, \nMultilevel Preconditioners for Reaction-Diffusion Problems with Discontinuous Coefficients\n, (submitted), \n2015\n.\n\n\nR. Anderson, V. Dobrev, Tz. Kolev and R. Rieben, \nMonotonicity in High-Order Curvilinear Finite Element ALE Remap\n, \nInt. J. Numer. Meth. Fluids\n, 77(5), pp. 249\u2013273, \n2014\n.\n\n\nV. Dobrev, Tz. Kolev and R. Rieben, \nHigh-order curvilinear finite element methods for elastic-plastic Lagrangian dynamics\n, \nJ. Comp. Phys.\n, (257B), pp. 1062\u20131080, \n2014\n.\n\n\nP. Vassilevski, U. Villa, \nA mixed formulation for the Brinkman problem\n, \nSIAM J. Numer. Anal.\n, 52-1, pp. 258-281, \n2014\n.\n\n\nP. Vassilevski, U. Villa, \nA block-diagonal algebraic multigrid preconditioner for the Brinkman problem\n, \nSIAM J. Sci. Comp.\n, 35-5, pp. S3-S17, \n2013\n.\n\n\nV. Dobrev, T. Ellis, Tz. Kolev and R. Rieben, \nHigh-order curvilinear finite elements for axisymmetric Lagrangian hydrodynamics\n, \nComputers and Fluids\n, pp. 58-69, \n2013\n.\n\n\nTz. Kolev and P. Vassilevski, \nParallel auxiliary space AMG solver for H(div) problems\n,  \nSIAM J. Sci. Comp.\n, 34, pp. A3079\u2013A3098, \n2012\n.\n\n\nV. Dobrev, Tz. Kolev and R. Rieben, \nHigh-order curvilinear finite element methods for Lagrangian hydrodynamics\n, \nSIAM J. Sci. Comp.\n, 34, pp. B606\u2013B641, \n2012\n.\n\n\nI. Lashuk and  P.Vassilevski, \nElement agglomeration coarse Raviart-Thomas spaces with improved approximation properties\n, \nNumer. Linear Algebra Appl.\n, 19, pp. 414-426, \n2012\n.\n\n\nD. Kalchev, \nAdaptive algebraic multigrid for \ufb01nite element elliptic equations with random coe\ufb03cients\n, \nLLNL Tech. Report\n, LLNL-TR-553254, \n2012\n.\n\n\nA. Aposporidis, P. Vassilevski, and A. Veneziani, \nA geometric nonlinear AMLI preconditioner for the  Bingham fluid flow in mixed variables\n, \nLLNL Tech. Report\n, LLNL-JRNL-600372, \n2012\n.\n\n\nD. Kalchev, C. Ketelsen, and P.S. Vassilevski, Adaptive algebraic multigrid for sequence of problems with slowly varying random coefficients, \nLLNL Tech. Report\n, LLNL-JRNL-589132, \n2012\n.\n\n\nA. Baker, R. Falgout, Tz. Kolev and U. Yang, \nMultigrid smoothers for ultra-parallel computing\n, \nSIAM J. Sci. Comp.\n, 33, pp. 2864-2887, \n2011\n.\n\n\nV. Dobrev, T. Ellis, Tz. Kolev and R. Rieben, \nCurvilinear finite elements for Lagrangian hydrodynamics\n, \nInt. J. Numer. Meth. Fluids\n, 65, pp. 1295\u20131310, \n2011\n.\n\n\nV. Dobrev, J.-L. Guermond, and B. Popov, \nSurface reconstruction and image enhancement via L1-minimization\n, \nSIAM J. Sci. Comp.\n, 32 (3), pp. 1591-1616, \n2010\n.\n\n\nJ. Brannick and R. Falgout, \nCompatible relaxation and coarsening in algebraic multigrid\n, \nSIAM J. Sci. Comp.\n, 32, pp. 1393-1416, \n2010\n.\n\n\nA. Baker, Tz. Kolev and U. M. Yang, \nImproving algebraic multigrid interpolation operators for linear elasticity problems\n, \nNumer. Linear Algebra Appl.\n, 17, pp. 495-517, \n2010\n.\n\n\nU. M. Yang, \nOn long-range interpolation operators for aggressive coarsening\n, \nNumer. Linear Algebra Appl.\n, 17, pp. 453\u2013472, \n2010\n.\n\n\nTz. Kolev and P. Vassilevski, \nParallel auxiliary space AMG for H(curl) problems\n, \nJ. Comput. Math.\n, 27, pp. 604-623, \n2009\n.\n\n\nA. Baker, E. Jessup and Tz. Kolev, \nA simple strategy for varying the restart parameter in GMRES(m)\n, \nJ. Comp. Appl. Math.\n, 230, pp. 751-761, \n2009\n.\n\n\nTz. Kolev, J. Pasciak and P. Vassilevski, \nH(curl) auxiliary mesh preconditioning\n, \nNumer. Linear Algebra Appl.\n, 15, pp. 455\u2013471, \n2008\n.\n\n\nH. De Sterck, R. Falgout, J. Nolting and U. M. Yang, \nDistance-two interpolation for parallel algebraic multigrid\n, \nNumer. Linear Algebra Appl.\n, 15, pp. 115\u2013139, \n2008\n.\n\n\nV. Dobrev, R. Lazarov, and L. Zikatanov, \nPreconditioning of symmetric interior penalty discontinuous Galerkin FEM for second order elliptic problems\n, in Domain Decomposition Methods in Science and Engineering XVII, Lecture Notes in Computational Science and Engineering, vol. 60, U. Langer et al. eds, Springer-Verlag, Berlin, Heidelberg, pp. 33-44, \n2008\n.\n\n\nD. Alber and L. Olson, \nParallel coarse grid selection\n, \nNumer. Linear Algebra Appl.\n, 14, pp. 611-643, \n2007\n.\n\n\nV. Dobrev, R. Lazarov, P. Vassilevski, and L. Zikatanov, \nTwo-level preconditioning of discontinuous Galerkin approximations of second-order elliptic equations\n, \nNumer. Linear Algebra Appl.\n, 13 (9), pp. 753-770, \n2006\n.\n\n\nTz. Kolev and P. Vassilevski, \nAMG by element agglomeration and constrained energy minimization interpolation\n, \nNumer. Linear Algebra Appl.\n, 13, pp. 771\u2013788, \n2006\n.\n\n\nJ. Bramble, Tz. Kolev and J. Pasciak, \nA least-squares approximation method for the time-harmonic Maxwell equations\n, \nJ. Numer. Math.\n, 13, pp. 237-263, \n2005\n.\n\n\nP. Vassilevski, \nSparse matrix element topology with application to AMG(e) and preconditioning\n, \nNumer. Linear Algebra Appl.\n, 9, pp. 429--444, \n2002\n.", 
            "title": "Publications"
        }, 
        {
            "location": "/publications/#publications", 
            "text": "", 
            "title": "Publications"
        }, 
        {
            "location": "/publications/#google-scholar-citations", 
            "text": "Recent  All time", 
            "title": "Google Scholar citations"
        }, 
        {
            "location": "/publications/#selected-publications", 
            "text": "Tz. Kolev, J. Xu and Y. Zhu,  Multilevel Preconditioners for Reaction-Diffusion Problems with Discontinuous Coefficients , (submitted),  2015 .  R. Anderson, V. Dobrev, Tz. Kolev and R. Rieben,  Monotonicity in High-Order Curvilinear Finite Element ALE Remap ,  Int. J. Numer. Meth. Fluids , 77(5), pp. 249\u2013273,  2014 .  V. Dobrev, Tz. Kolev and R. Rieben,  High-order curvilinear finite element methods for elastic-plastic Lagrangian dynamics ,  J. Comp. Phys. , (257B), pp. 1062\u20131080,  2014 .  P. Vassilevski, U. Villa,  A mixed formulation for the Brinkman problem ,  SIAM J. Numer. Anal. , 52-1, pp. 258-281,  2014 .  P. Vassilevski, U. Villa,  A block-diagonal algebraic multigrid preconditioner for the Brinkman problem ,  SIAM J. Sci. Comp. , 35-5, pp. S3-S17,  2013 .  V. Dobrev, T. Ellis, Tz. Kolev and R. Rieben,  High-order curvilinear finite elements for axisymmetric Lagrangian hydrodynamics ,  Computers and Fluids , pp. 58-69,  2013 .  Tz. Kolev and P. Vassilevski,  Parallel auxiliary space AMG solver for H(div) problems ,   SIAM J. Sci. Comp. , 34, pp. A3079\u2013A3098,  2012 .  V. Dobrev, Tz. Kolev and R. Rieben,  High-order curvilinear finite element methods for Lagrangian hydrodynamics ,  SIAM J. Sci. Comp. , 34, pp. B606\u2013B641,  2012 .  I. Lashuk and  P.Vassilevski,  Element agglomeration coarse Raviart-Thomas spaces with improved approximation properties ,  Numer. Linear Algebra Appl. , 19, pp. 414-426,  2012 .  D. Kalchev,  Adaptive algebraic multigrid for \ufb01nite element elliptic equations with random coe\ufb03cients ,  LLNL Tech. Report , LLNL-TR-553254,  2012 .  A. Aposporidis, P. Vassilevski, and A. Veneziani,  A geometric nonlinear AMLI preconditioner for the  Bingham fluid flow in mixed variables ,  LLNL Tech. Report , LLNL-JRNL-600372,  2012 .  D. Kalchev, C. Ketelsen, and P.S. Vassilevski, Adaptive algebraic multigrid for sequence of problems with slowly varying random coefficients,  LLNL Tech. Report , LLNL-JRNL-589132,  2012 .  A. Baker, R. Falgout, Tz. Kolev and U. Yang,  Multigrid smoothers for ultra-parallel computing ,  SIAM J. Sci. Comp. , 33, pp. 2864-2887,  2011 .  V. Dobrev, T. Ellis, Tz. Kolev and R. Rieben,  Curvilinear finite elements for Lagrangian hydrodynamics ,  Int. J. Numer. Meth. Fluids , 65, pp. 1295\u20131310,  2011 .  V. Dobrev, J.-L. Guermond, and B. Popov,  Surface reconstruction and image enhancement via L1-minimization ,  SIAM J. Sci. Comp. , 32 (3), pp. 1591-1616,  2010 .  J. Brannick and R. Falgout,  Compatible relaxation and coarsening in algebraic multigrid ,  SIAM J. Sci. Comp. , 32, pp. 1393-1416,  2010 .  A. Baker, Tz. Kolev and U. M. Yang,  Improving algebraic multigrid interpolation operators for linear elasticity problems ,  Numer. Linear Algebra Appl. , 17, pp. 495-517,  2010 .  U. M. Yang,  On long-range interpolation operators for aggressive coarsening ,  Numer. Linear Algebra Appl. , 17, pp. 453\u2013472,  2010 .  Tz. Kolev and P. Vassilevski,  Parallel auxiliary space AMG for H(curl) problems ,  J. Comput. Math. , 27, pp. 604-623,  2009 .  A. Baker, E. Jessup and Tz. Kolev,  A simple strategy for varying the restart parameter in GMRES(m) ,  J. Comp. Appl. Math. , 230, pp. 751-761,  2009 .  Tz. Kolev, J. Pasciak and P. Vassilevski,  H(curl) auxiliary mesh preconditioning ,  Numer. Linear Algebra Appl. , 15, pp. 455\u2013471,  2008 .  H. De Sterck, R. Falgout, J. Nolting and U. M. Yang,  Distance-two interpolation for parallel algebraic multigrid ,  Numer. Linear Algebra Appl. , 15, pp. 115\u2013139,  2008 .  V. Dobrev, R. Lazarov, and L. Zikatanov,  Preconditioning of symmetric interior penalty discontinuous Galerkin FEM for second order elliptic problems , in Domain Decomposition Methods in Science and Engineering XVII, Lecture Notes in Computational Science and Engineering, vol. 60, U. Langer et al. eds, Springer-Verlag, Berlin, Heidelberg, pp. 33-44,  2008 .  D. Alber and L. Olson,  Parallel coarse grid selection ,  Numer. Linear Algebra Appl. , 14, pp. 611-643,  2007 .  V. Dobrev, R. Lazarov, P. Vassilevski, and L. Zikatanov,  Two-level preconditioning of discontinuous Galerkin approximations of second-order elliptic equations ,  Numer. Linear Algebra Appl. , 13 (9), pp. 753-770,  2006 .  Tz. Kolev and P. Vassilevski,  AMG by element agglomeration and constrained energy minimization interpolation ,  Numer. Linear Algebra Appl. , 13, pp. 771\u2013788,  2006 .  J. Bramble, Tz. Kolev and J. Pasciak,  A least-squares approximation method for the time-harmonic Maxwell equations ,  J. Numer. Math. , 13, pp. 237-263,  2005 .  P. Vassilevski,  Sparse matrix element topology with application to AMG(e) and preconditioning ,  Numer. Linear Algebra Appl. , 9, pp. 429--444,  2002 .", 
            "title": "Selected Publications"
        }, 
        {
            "location": "/team/", 
            "text": "The MFEM Team\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nTzanio Kolev\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nVeselin Dobrev\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nJakub Cerveny\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nMark Stowell\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nAaron Fisher\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nBob Anderson\n\n\n\n\n\n\n    \n\n    \n\n    \n\n    \nVladimir Tomov\n\n\n\n\n\n\n\n\nFormer Members\n\n\n\n\nStanimire Tomov\n\n\nTruman Ellis\n\n\nIlya Lashuk\n\n\nIdo Akkerman", 
            "title": "The Team"
        }, 
        {
            "location": "/team/#the-mfem-team", 
            "text": "Tzanio Kolev   \n     \n     \n     \n     Veselin Dobrev   \n     \n     \n     \n     Jakub Cerveny   \n     \n     \n     \n     Mark Stowell   \n     \n     \n     \n     Aaron Fisher   \n     \n     \n     \n     Bob Anderson   \n     \n     \n     \n     Vladimir Tomov", 
            "title": "The MFEM Team"
        }, 
        {
            "location": "/team/#former-members", 
            "text": "Stanimire Tomov  Truman Ellis  Ilya Lashuk  Ido Akkerman", 
            "title": "Former Members"
        }, 
        {
            "location": "/gallery/", 
            "text": "Gallery\n\n\nThis page collects screenshots from various simulations based on MFEM. \n\nAdditional images can be found in the  \nGLVis Gallery\n.\n\n\n\n\n\n\n\n\nA version of the MFEM logo demonstrating curvilinear elements, \nadaptive mesh refinement\n \n\nand (idealized) parallel partitioning. Visualization with \nGLVis\n.\n\n\n\n\n\n\nParallel version of \nExample 1\n on 100 processors with a relatively coarse version of \nsquare-disc.mesh\n.\n Visualization with \nGLVis\n.\n\n\n\n\n\n\nLevel lines in a cutting plane of the solution from the parallel version of \nExample 1\n \n on 64 processors with \nfichera.mesh\n. Visualization with \nGLVis\n.\n\n\n\n\n\n\nLevel surfaces in the interior of the solution from \nExample 1\n on \nescher.mesh\n. Visualization with \nGLVis\n.\n\n\n\n\n\n\nStreamlines of the magnetic field from a \nparallel computation\n of the magnetostatic \ninteraction of two magnetic orbs. Visualization with \nVTK\n.\n\n\n\n\n\n\n3D Arbitrary Lagrangian-Eulerian (ALE) simulation of a shock-triple point interaction with Q2-Q1 \n elements\nin the MFEM-based \nBLAST\n shock hydrodynamics code. Volume visualization with \nVisIt\n.\n\n\n\n\n\n\nPlanar inertial confinement fusion (ICF)-like implosion using mixed 4th finite elements in the MFEM-based \nBLAST\n shock hydrodynamics code. Visualization with \nVisIt\n.\n\n\n\n\n\n\nPurely Lagrangian Rayleigh-Taylor instability simulation using 8th order mixed elements in the MFEM-based \nBLAST\n shock hydrodynamics code. Visualization with \nGLVis\n.\n\n\n\n\n\n\n\nModeling elastic-plastic flow in the 3D Taylor high-velocity impact problem using 4th order mixed elements in the MFEM-based \nBLAST\n shock hydrodynamics code. Visualization with \nVisIt\n.\n\n\n\n\n\n\nMulti-mode Rayleigh-Taylor instability simulation using 4th order mixed elements in the MFEM-based \nBLAST\n shock hydrodynamics code. Visualization with \nVisIt\n.\n\n\n\n\n\n\nTest of the anisotropic refinement feature on a random mesh. A slightly modified version of \nExample 1\n. Visualization with \nGLVis\n.\n\n\n\n\n\n\nAnisotropic refinement in a 2D shock-like AMR test problem. Visualization with \nGLVis\n.\n\n\n\n\n\n\nAnisotropic refinement in a 3D version of the AMR test. Portion of the spherical domain is cut away in \nGLVis\n.", 
            "title": "Gallery"
        }, 
        {
            "location": "/gallery/#gallery", 
            "text": "This page collects screenshots from various simulations based on MFEM.  \nAdditional images can be found in the   GLVis Gallery .     A version of the MFEM logo demonstrating curvilinear elements,  adaptive mesh refinement   \nand (idealized) parallel partitioning. Visualization with  GLVis .    Parallel version of  Example 1  on 100 processors with a relatively coarse version of  square-disc.mesh .  Visualization with  GLVis .    Level lines in a cutting plane of the solution from the parallel version of  Example 1    on 64 processors with  fichera.mesh . Visualization with  GLVis .    Level surfaces in the interior of the solution from  Example 1  on  escher.mesh . Visualization with  GLVis .    Streamlines of the magnetic field from a  parallel computation  of the magnetostatic  interaction of two magnetic orbs. Visualization with  VTK .    3D Arbitrary Lagrangian-Eulerian (ALE) simulation of a shock-triple point interaction with Q2-Q1   elements\nin the MFEM-based  BLAST  shock hydrodynamics code. Volume visualization with  VisIt .    Planar inertial confinement fusion (ICF)-like implosion using mixed 4th finite elements in the MFEM-based  BLAST  shock hydrodynamics code. Visualization with  VisIt .    Purely Lagrangian Rayleigh-Taylor instability simulation using 8th order mixed elements in the MFEM-based  BLAST  shock hydrodynamics code. Visualization with  GLVis .    \nModeling elastic-plastic flow in the 3D Taylor high-velocity impact problem using 4th order mixed elements in the MFEM-based  BLAST  shock hydrodynamics code. Visualization with  VisIt .    Multi-mode Rayleigh-Taylor instability simulation using 4th order mixed elements in the MFEM-based  BLAST  shock hydrodynamics code. Visualization with  VisIt .    Test of the anisotropic refinement feature on a random mesh. A slightly modified version of  Example 1 . Visualization with  GLVis .    Anisotropic refinement in a 2D shock-like AMR test problem. Visualization with  GLVis .    Anisotropic refinement in a 3D version of the AMR test. Portion of the spherical domain is cut away in  GLVis .", 
            "title": "Gallery"
        }, 
        {
            "location": "/download/", 
            "text": "Latest Release\n\n\n\n\nNew features\n \n/ \nExample codes\n\n/ \nCode documentation\n \n/ \nSources\n\n\n\n\n\n\nDownload mfem-3.0.1.tgz\n\n\n\n\nPlease use the GitHub \nissue tracker\n\nto report \nbugs\n \nor post \nquestions or comments\n.\n\n\nAll Releases\n\n\n\n\n\n\n\n\nFilename\n\n\nVersion\n\n\nRelease Date\n\n\nSize\n\n\nSLOC\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n\n\nmfem-3.0.1.tgz\n\n\nv3.0.1\n\n\nJan 2015\n\n\n1.1M\n\n\n61K\n\n\nBugfix release\n\n\n\n\n\n\n\n\nmfem-3.0.tgz\n\n\nv3.0\n\n\nJan 2015\n\n\n1.1M\n\n\n61K\n\n\n\n\n\n\n\n\n\n\nmfem-9e90b6710d.tgz\n\n\nN/A\n\n\nJul 2014\n\n\n388K\n\n\n51K\n\n\nDevelopment release\n\n\n\n\n\n\n\n\nmfem-68e941f8fe.tgz\n\n\nN/A\n\n\nJul 2013\n\n\n367K\n\n\n48K\n\n\nDevelopment release\n\n\n\n\n\n\n\n\nmfem-2.0.tgz\n\n\nv2.0\n\n\nNov 2011\n\n\n307K\n\n\n40K\n\n\n\n\n\n\n\n\n\n\nmfem-v1.2.2.tgz\n\n\nv1.2.2\n\n\nApr 2011\n\n\n239K\n\n\n28K\n\n\nBugfix release\n\n\n\n\n\n\n\n\nmfem-v1.2.1.tgz\n\n\nv1.2.1\n\n\nApr 2011\n\n\n239K\n\n\n28K\n\n\nBugfix release\n\n\n\n\n\n\n\n\nmfem-v1.2.tgz\n\n\nv1.2\n\n\nApr 2011\n\n\n239K\n\n\n28K\n\n\n\n\n\n\n\n\n\n\nmfem-v1.1.tgz\n\n\nv1.1\n\n\nSep 2010\n\n\n165K\n\n\n23K\n\n\n\n\n\n\n\n\n\n\nmfem-v1.0.tgz\n\n\nv1.0\n\n\nJul 2010\n\n\n159K\n\n\n22K\n\n\nInitial release\n\n\n\n\n\n\n\n\n\n\nMFEM originates from previous research effort in the (unreleased) \nAggieFEM/aFEM\n project.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#latest-release", 
            "text": "New features  \n/  Example codes \n/  Code documentation  \n/  Sources    Download mfem-3.0.1.tgz   Please use the GitHub  issue tracker \nto report  bugs  \nor post  questions or comments .", 
            "title": "Latest Release"
        }, 
        {
            "location": "/download/#all-releases", 
            "text": "Filename  Version  Release Date  Size  SLOC  Notes       mfem-3.0.1.tgz  v3.0.1  Jan 2015  1.1M  61K  Bugfix release     mfem-3.0.tgz  v3.0  Jan 2015  1.1M  61K      mfem-9e90b6710d.tgz  N/A  Jul 2014  388K  51K  Development release     mfem-68e941f8fe.tgz  N/A  Jul 2013  367K  48K  Development release     mfem-2.0.tgz  v2.0  Nov 2011  307K  40K      mfem-v1.2.2.tgz  v1.2.2  Apr 2011  239K  28K  Bugfix release     mfem-v1.2.1.tgz  v1.2.1  Apr 2011  239K  28K  Bugfix release     mfem-v1.2.tgz  v1.2  Apr 2011  239K  28K      mfem-v1.1.tgz  v1.1  Sep 2010  165K  23K      mfem-v1.0.tgz  v1.0  Jul 2010  159K  22K  Initial release      MFEM originates from previous research effort in the (unreleased)  AggieFEM/aFEM  project.", 
            "title": "All Releases"
        }
    ]
}